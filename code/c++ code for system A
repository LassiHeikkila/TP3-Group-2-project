#include <iostream>
#include <cstdlib>
#include <cmath>
#include <new>

/*
This program numerically solves Laplace's equation
		Del^2 E = 0
where E is the electric field, for the case of an
infinitely long cylinder placed between two infinite
plates of respective voltage -V and +V.
We solve for the two dimensional case.

program is called as
./exe d dx h dy r iterations
d - plate separation
h - plate height
dx - step-size in x
dy - step-size in y
r - radius of cylinder
*/

/*
TO DO
 functionalise
 Bash scipt to run program with CLI
 Problem with dynamic memory allocation
*/

int main(int argc, char *argv[])
{
int i, j; //declare two counters
float d, h;  //declare floats to specify dimensions of system
float dx, dy; //declare floats to specify step-sizes

//get user input
/*
std::cout << "Define the distance between the plates:";
std::cin >> d;
std::cout << "Define the height of the plates:";
std::cin >> h;
std::cout << "Define the step-size in x:";
std::cin >> dx;
std::cout << "Define the step-size in y:";
std::cin >> dy;
*/

d=atof(argv[1]);
dx=atof(argv[2]);
h=atof(argv[3]);
dy=atof(argv[4]);

//define number of points in x and y directions
int nx = floor(d/dx); //number of points in x OR no. of columns
int ny = floor(h/dy); //number of points in y OR no. of rows

/*

//dynamically allocate memory for a 2d array of size nx+1 by ny+1
float** u = new float*[ny+1];

for (i = 0; i < ny+1; ++i)
{
   u[i] = new float[nx+1];
}
*/

float u[nx+1][ny+1];

//define arbitrary potential
int V=1;

//define initial condition, linear potential between plates, from V to -V
for (i=0; i<=nx; i++)
{
 for (j=0; j<=ny; j++)
 {
  u[i][j]=V-((float)2/nx)*V*i;
 }
}

//get input of radius and number of iterations
float r;
int iterations;

/*
std::cout << "Specify the radius of the cylinder:";
std::cin >> r;
std::cout << "Specify the number of iterations you wish to perform:";
std::cin >> iterations;
*/

r = atof(argv[5]);
iterations = atoi(argv[6]);

//validate input
if (r >= nx || r >= ny || iterations < 1)
{
 std::cout << "Invalid input. Exiting momentarily."<< std::endl;
 exit(EXIT_FAILURE);
}

//initialise a counter
int count = 0;

//find new configuration of system, loop over x and y
do
{
for (i=1; i<=nx-1; i++)
 {
  for (j=0; j<=ny; j++)
  {
   //if point in circle
   if ((((i*dx)-(0.5*d))*((i*dx)-(0.5*d)))+(((j*dy)-(0.5*h))*((j*dy)-(0.5*h))) < r*r)
   {
    u[i][j] = 0; //potential is 0
   }
   else
   {
    u[i][j]=0.25*(u[i+1][j]+u[i][j+1]+u[i-1][j]+u[i][j-1]); //point is average of four surrunding points
   }
  }
 }
count++; //increment counter
} while (count < iterations);

//print out solution, in tabular readable format
for (j=0; j<=ny; j++)
{
 for (i=0; i<=nx; i++)
  {
  std::cout << i << "\t" << j << "\t" << u[i][j] << '\n';
  }
 std::cout << std::endl;
}

/*
//delete allocated memory
for (i = 0; i < ny+1; ++i)
{
  delete [] u[i];
}

delete [] u;
*/

}
